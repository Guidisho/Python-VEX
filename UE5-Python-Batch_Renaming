import unreal

def get_selected_content_browser_assets():
    editor_utility = unreal.EditorUtilityLibrary()
    selected_assets = editor_utility.get_selected_assets()

    return selected_assets

def generate_new_name_for_asset(asset):
    name = asset.get_name()

    if isinstance(asset, unreal.MaterialInstance):
        return "MI_" + asset.get_name()
    
    if isinstance(asset, unreal.Material):
        return "M_" + asset.get_name()
    
    if isinstance(asset, unreal.Texture):
        return "T_" + asset.get_name()
    
    if isinstance(asset, unreal.NiagaraSystem):
        return "NS_" + asset.get_name()
    
    if isinstance(asset, unreal.Blueprint):
        return "BP_" + asset.get_name()
    
    return asset.get_name()

def rename_assets():
    selected_assets = get_selected_content_browser_assets()
 
    for i in range(len(selected_assets)):
        asset = selected_assets[i]
        
        old_name = asset.get_name()
        asset_old_path = asset.get_path_name()
        asset_folder = unreal.Paths.get_path(asset_old_path)
        
        new_name = generate_new_name_for_asset(asset)
        new_path = asset_folder + "/" + new_name

        if new_name == old_name:
            print(f"Ignoring {old_name} as it already has the correct name")
            continue 

        print(f"Renaming {old_name} to {new_name}...")

        rename_success = unreal.EditorAssetLibrary.rename_asset(asset_old_path, new_path)
        if not rename_success:
            unreal.log_error("Could not rename: " + asset_old_path)

def run():
    selected_assets = get_selected_content_browser_assets()
    rename_assets(selected_assets)

rename_assets()
run()
